<Controls:MetroWindow
    xmlns:Controls="http://metro.mahapps.com/winfx/xaml/controls"
    xmlns:IconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
	x:Class="CodeBuilder.MainWindow"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:Controls_TreeView="clr-namespace:System.Windows.Controls;assembly=MultiSelectTreeView" 
	xmlns:demo="clr-namespace:CodeBuilder"
	xmlns:vm="clr-namespace:CodeBuilder.ViewModel"
	xmlns:sys="clr-namespace:System;assembly=mscorlib"
	TextOptions.TextFormattingMode="Display"
	UseLayoutRounding="True"
	Title="CodeBuilder"
	Height="488" Width="1000"
	Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
	ResizeMode="CanResizeWithGrip">

    <Window.Resources>
        <!--
		Here the normal editor template is defined
		-->
        <DataTemplate x:Key="EditTemplate" DataType="{x:Type vm:TreeItemViewModel}">
            <StackPanel Orientation="Horizontal">
                <Border Background="YellowGreen" CornerRadius="3" Width="16" Height="16"/>
                <Controls_TreeView:EditTextBox
					Text="{Binding DisplayName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
					Padding="2,0,0,0"/>
            </StackPanel>
        </DataTemplate>

        <!--
		This is a specialised editor template for ColorItemViewModel items
		-->
        <ObjectDataProvider x:Key="colorsTypeOdp" ObjectType="{x:Type sys:Type}" MethodName="GetType">
            <ObjectDataProvider.MethodParameters>
                <sys:String>System.Windows.Media.Colors, PresentationCore, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</sys:String>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
        <ObjectDataProvider x:Key="colorPropertiesOdp" ObjectInstance="{StaticResource colorsTypeOdp}" MethodName="GetProperties"/>
        <!--
		The following selector selects a DataTemplate based on the type of an item. It is only
		required when using multiple different editor templates. If you do not use editing
		functionality of items at all or only need a single editor template, you can omit these
		template definitions and the selector and just define the template further down where it
		is noted.
		-->
        <demo:TypeTemplateSelector x:Key="EditorTemplateSelector">
            <demo:TypeTemplateSelector.TemplateDefinitions>
                <!--
				Following are all view model types that use a special editor template. Be sure to
				specify the most specialised type first, as base types will also be considered.
				-->
                <demo:TypeTemplateDefinition
					Type="{x:Type vm:TreeItemViewModel}" Template="{StaticResource EditTemplate}"/>
            </demo:TypeTemplateSelector.TemplateDefinitions>
        </demo:TypeTemplateSelector>

        <BooleanToVisibilityConverter x:Key="BoolToVisibility"/>

       
        
    </Window.Resources>
    <Controls:MetroWindow.LeftWindowCommands>
        <Controls:WindowCommands ShowLastSeparator="False">
            <Button>
                <IconPacks:PackIconModern Width="22"
                                          Height="22"
                                          Kind="PageCode" />
            </Button>
        </Controls:WindowCommands>
    </Controls:MetroWindow.LeftWindowCommands>
    <Controls:MetroWindow.RightWindowCommands>
        <Controls:WindowCommands ShowLastSeparator="False">
            <Button
                    ToolTip="login sql" x:Name="btnLogin">
                <IconPacks:PackIconModern Width="22"
                                          Height="22"
                                          Kind="Settings" />
            </Button>
            <Button
                    ToolTip="Change Skin" x:Name="btnSkin">
            <IconPacks:PackIconModern Width="22"
                                          Height="22"
                                          Kind="People" />
            </Button>
        </Controls:WindowCommands>
    </Controls:MetroWindow.RightWindowCommands>
    
    <Grid Margin="12,8,12,12">


        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" x:Name="FirstColumn"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="0" x:Name="LastColumn"/>
        </Grid.ColumnDefinitions>

        <DockPanel Margin="0,0,12,0">
            <Popup x:Name="skinUI" Margin="0" PopupAnimation="Fade" PlacementTarget="{Binding ElementName=btnSkin}"  
             StaysOpen="False" SnapsToDevicePixels="True" ClipToBounds="True" AllowsTransparency="True" Placement="Left" VerticalOffset="25">
                <Border x:Name="bdSkin" BorderBrush="{DynamicResource AccentColorBrush}" BorderThickness="1"   
                  CornerRadius="8" Height="170" Width="450">
                    <WrapPanel x:Name="skinPanel"/>
                </Border>
            </Popup>
            <TextBlock DockPanel.Dock="Top" Style="{StaticResource FirstCaption}">The TreeView control</TextBlock>
            <Controls_TreeView:MultiSelectTreeView
				Name="TheTreeView"
				ItemsSource="{Binding Children}"
				PreviewSelectionChanged="TheTreeView_PreviewSelectionChanged">

                <Controls_TreeView:MultiSelectTreeView.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Expand" Click="ExpandMenuItem_Click"/>
                        <Separator/>
                        <MenuItem Header="Rename" Click="RenameMenuItem_Click"/>
                        <MenuItem Header="Delete" Click="DeleteMenuItem_Click"/>
                    </ContextMenu>
                </Controls_TreeView:MultiSelectTreeView.ContextMenu>

                <Controls_TreeView:MultiSelectTreeView.ItemContainerStyle>
                    <Style TargetType="{x:Type Controls_TreeView:MultiSelectTreeViewItem}">
                        <!--
						Here the TreeViewItem's properties are connected with the ViewModel class.
						Basically you would make all MultiSelectTreeViewItem properties accessible
						in the view model class that you possibly want to get or set in order to
						determine or manipulate the view from the view model class.
						-->
                        <Setter Property="DisplayName" Value="{Binding DisplayName, Mode=TwoWay}"/>
                        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
                        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                        <Setter Property="IsEnabled" Value="{Binding IsEnabled, Mode=TwoWay}"/>
                        <Setter Property="IsVisible" Value="{Binding IsVisible, Mode=TwoWay}"/>
                        <Setter Property="IsEditable" Value="{Binding IsEditable, Mode=TwoWay}"/>
                        <Setter Property="IsEditing" Value="{Binding IsEditing, Mode=TwoWay}"/>
                        <Setter Property="Remarks" Value="{Binding Remarks, Mode=TwoWay}"/>
                        <!--
						The ContentTemplateEdit property defines a DataTemplate that is applied
						instead of the normal viewing DataTemplate (definition below) when the item
						is in edit mode. If you do not need editing functionality or the default
						template is good for you, then you can omit this Setter.
						-->
                        <Setter Property="ContentTemplateEdit">
                            <Setter.Value>
                                <DataTemplate>
                                    <!--
									NOTE:
									Instead of using a ContentControl which selects an editor template,
									you could directly define an editor template here which then applies
									to all item data types.
									EXAMPLE:
									<StackPanel Orientation="Horizontal">
										<Border Background="YellowGreen" CornerRadius="3" Width="16" Height="16"/>
										<Controls:EditTextBox
											Text="{Binding DisplayName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
											Padding="2,0,0,0"/>
									</StackPanel>
									-->
                                    <ContentControl
										Content="{Binding}"
										ContentTemplateSelector="{StaticResource EditorTemplateSelector}"/>
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>
                        <!--
						The RemarksTemplate property defines a DataTemplate that is applied instead
						of the normal viewing DataTemplate. If you do not need remarks
						functionality or the default template is good for you, then you can omit
						this Setter.
						-->
                        <Setter Property="RemarksTemplate">
                            <Setter.Value>
                                <DataTemplate>
                                    <TextBlock VerticalAlignment="Center" Margin="3,0,0,0" Foreground="#a0ff0000" FontStyle="Italic" Text="{Binding}">
                                        <TextBlock.Style>
                                            <Style TargetType="TextBlock">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding}" Value="{x:Null}">
                                                        <Setter Property="Visibility" Value="Collapsed"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding}" Value="">
                                                        <Setter Property="Visibility" Value="Collapsed"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBlock.Style>
                                    </TextBlock>
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Controls_TreeView:MultiSelectTreeView.ItemContainerStyle>

                <Controls_TreeView:MultiSelectTreeView.Resources>
                    <!--
					Here the general item appearance is defined, for the ViewModel.TreeItemViewModel type
					-->
                    <HierarchicalDataTemplate DataType="{x:Type vm:TreeItemViewModel}" ItemsSource="{Binding Children}">
                        <StackPanel Orientation="Horizontal">
                            <Image VerticalAlignment="Center" Source="{Binding Icon}" Width="16" Height="16" Margin="0,0,2,2"></Image>
                            <TextBlock Text="{Binding DisplayName}" VerticalAlignment="Center" Padding="4,0,2,0"/>
                        </StackPanel>
                    </HierarchicalDataTemplate>
                </Controls_TreeView:MultiSelectTreeView.Resources>
            </Controls_TreeView:MultiSelectTreeView>
        </DockPanel>
    </Grid>


</Controls:MetroWindow>
